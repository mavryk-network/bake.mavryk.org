[{"body":" TezBake TezPay TezGov ","categories":"","description":"","excerpt":" TezBake TezPay TezGov ","ref":"/","tags":"","title":"Documentation"},{"body":"\n","categories":"","description":"","excerpt":"\n","ref":"/tezbake/","tags":"","title":"TezBake"},{"body":"\n","categories":"","description":"","excerpt":"\n","ref":"/tezgov/","tags":"","title":"TezGov"},{"body":"","categories":"","description":"","excerpt":"","ref":"/tezpay/","tags":"","title":"TezPay"},{"body":"TezBake A payment distribution tool developed by Tezos Capital for Bakers on the Tezos Blockchain\nBakeBuddy CLI is a command line tool for Linux which integrates its function with the official Tezos binary images provided by the Tezos developers, with the goal to deliver a seamless experience in installing, upgrading and monitoring a Tezos node. BakeBuddy CLI (BB-CLI) is the tool used by BakeBuddy GUI (BB-GUI) “under the hood” to provide the core functionality. There are 2 ways to bake on Tezos depending on your intention. You can learn how to bake on a testnet with fake tokens or you can bake on mainnet with real tez. Either way BakeBuddy has your back.\nPreparation Installing BakeBuddy CLI (bb-cli) and using it to setup your Tezos baker is very simple. You will need the following tools:\nSpare computer or existing computer with Linux installed. We recommend Ubuntu Linux. (note: you must have an SSD drive or better \u0026 at least 8GB RAM) Ledger Nano S hardware wallet with Tezos Wallet \u0026 Baker apps installed. (note: it’s necessary to use Ledger Live to install the Tezos Wallet \u0026 Baking applications; to install the latter you must enable developer mode in Ledger Live settings) Installation Download and copy bb-cli To begin, download the latest bb-cli version for your Linux desktop and copy it to a universally available location so you can execute BB-CLI command from any location. Using the commands below, typed or pasted one-by-one is the intended order of operations. If you have a regular Intel or AMD computer that’s not “ARM” based.\ncd /tmp \u0026\u0026 wget https://gitlab.com/groktech/bakebuddy-cli/-/raw/main/bb-cli-linux-amd64 \u0026\u0026 chmod +x bb-cli-linux-amd64 sudo mv bb-cli-linux-amd64 /usr/sbin/bb-cli # you may be prompted for sudo password; execute 1 line at a time If you have a Raspberry Pi or you’re running Linux on macOS M1 architecture:\ncd /tmp \u0026\u0026 wget https://gitlab.com/groktech/bakebuddy-cli/-/raw/main/bb-cli-linux-arm64 \u0026\u0026 chmod +x bb-cli-linux-arm64 sudo mv bb-cli-linux-arm64 /usr/sbin/bb-cli # you may be prompted for sudo password; execute 1 line at a time Setup Tezos node, signer and install bb-cli dependencies bb-cli setup -a # you may be prompted for sudo password Bootstrap Tezos node At this stage, it’s necessary to bootstrap your node, meaning to download a copy of the blockchain so you don’t have to synchronize block-by-block, which takes hours at best. With the import method shown below, bootstrapping could take as little as 5 minutes.\nbb-cli bootstrap-node --tarball Start Tezos node After importing the snapshot, you need to start your node and wait until it’s fully synchronized before importing your Ledger key.\nbb-cli start After starting the node, run the following command over and over every few minutes and monitor the “level” displayed.\nbb-cli info Level refers to the latest block number on mainnet. Navigate to https://tzkt.io or https://tzstats.com and observe the latest block. Once the level in your command matches the latest block on your blockchain explorer, your node is in full sync and you can keep following the steps below.\nImport Ledger key Now that your node is in full sync, you can import your Ledger key. You will need to connect your Ledger and enter your Ledger PIN. Then open the Tezos Baking app.\nbb-cli import-key --derivation-path=\"ed25519/0h/0h\" # If you have a custom derivation path, you can change ed to bip as shown (--derivation-path=\"bip25519/3h/6h/9h\") The ledger will ask you twice to confirm this operation. Make sure the baker you see on the ledger screen matches the one you want to use. If you don’t have this information yet, don’t worry. To get the address of the ledger that’s used by default simply go to https://kukai.app and login with ledger, accepting the default derivation path.\nbip is supposed to be more strong in the long term than ed25519, which is the default one. Including it in the command above as shown does not change the default behavior but it shows which path is default so it can be customized for preference and security.\nPutting the baker on a non-default derivation path provides an additional layer of security for your baker at the cost of extra complexity for you. Make sure your setup is clearly documented for your own records.\nAuthorize Ledger to bake for key Having imported your Ledger key to your signer, it’s time to authorize your Ledger to bake for this key.\nbb-cli setup-ledger --main-hwm 1 # Pay careful attention to the value of --main-hwm If your device was used to bake before it might have a “high watermark” aka HWM. If you try to use this device on a testnet, it will not work because the block height on test networks usually starts with 1 while mainnet is up to over a couple of million blocks at the time of writing. If you used to bake on mainnet with the same ledger as you’re trying to use now but it’s been a while, it’s highly recommended to change the 1 above to the current Tezos block, which can be found at.\nThe watermark is simply a record of the lack block number your ledger helped to bake or endorse. If you’re setting up a brand new device that’s not been used for baking before, there is no need to alter the default command above.\nAlways make sure you’re not accidentally going to double bake by using your production ledger and/or setup to bake on a testnet. It’s really easy to make this mistake and the only thing preventing it are your personal standard operating procedures.\nRegister Ledger key as baker on the blockchain For this step your node level must be synced with the latest block on the blockchain explorer. You must also temporarily open your Ledger Tezos Wallet app to register your key as a baker. For all other operations, you must use the Tezos Baking app.\nbb-cli register-key Registering is not necessary if this is already an active baker ledger which is being setup on some kind of failover machine or in a situation where it has not been over 2 weeks of actively baking.\n","categories":"","description":"","excerpt":"TezBake A payment distribution tool developed by Tezos Capital for Bakers on the Tezos Blockchain\nBakeBuddy CLI is a command line tool for Linux which integrates its function with the official Tezos …","ref":"/tezbake/tutorial/","tags":"","title":"Tutorial"},{"body":"TezPay A payment distribution tool that’s easy to setup and automate\nThe goal of this document is to instruct a baker on how to set up TezPay and how to pay-out the bakers delegates. The workflow will accomplish these tasks from Command-line-interface(CLI) - if you do not have experience in CLI this tutorial will include screen captures as well as examples and explanations of the steps. This tutorial is meant to cover all skill levels from novice to expert.\nPreparation There is minimal preparation needed to utilize TezPay, assuming that you have a functioning public baker running. To get help with setting up a baker see YourBakeBuddy - Setting up a public Baker.\nPreparation Summary\nCreate a directory (folder) on your desktop (or appropriate location) to store the application files and required config files Download the Tezpay software, sample configuration, and payout wallet files from github Create a ‘pay-out’ wallet and store the private key (not baker or hot wallet) Preparation: Step 1 Create TezPay Directory Create a new folder on the desktop or in a location that you want to store the necessary files for Tezpay.\nThis folder will eventually contain 3 files:\nTezPay Application File Configuration File Private-Key File The TezPay Application File will execute the commands that will run TezPay, the Configuration File will essentially tell the application file how to run and will be edited by the baker (we will cover this later), and the Private-Key File will contain the private key for a wallet you have designated to pay your delegators (we will explain an easy way to get this later as well). A note on the Private-key file - it is not recommended to use an existing wallet that may house important assets (including NFT’s or crypto tokens) but to create a new wallet that contains only enough Tezos to pay out delegates.\nPreparation: Step 2 Download Files Download the software from Github using the link: https://github.com/alis-is/tezpay/releases. In this repository, select the correct operating system and system architecture (arm64 or amd64). For this example we will be using arm64\nNote: If you do not know the system architecture you can find out by opening a Terminal and executing the command uname -m, and this will return the system architecturearm64 or amd64.\nThe example below displays arm64\nIf you would rather utilize CLI to download the application you will need to change directory (cd) to the TezPay directory created in step 1 in the terminal, then use command wget -q\rhttps://raw.githubusercontent.com/alis-is/tezpay/main/install.sh -O\r/tmp/install.sh \u0026\u0026 sh /tmp/install.sh\nSee example code below (note: input begins after last ‘%’ character):\nThe above example is an alternative to downloading from the GitHub repository\nNext, you will download the sample configuration file \u0026 payout_wallet_private.sample.key file from : https://github.com/alis-is/tezpay/blob/main/docs/configuration/ - or you can open file in GitHub and copy text to a text editor.\nNote, there are two choices for the configuration files:\nSimple Config file : config.default.hjson (basic arguments to run Tezpay) Full Config: config.sample.hjson (advanced arguements to run Tezpay) Preparation: Step 3 - Payout Wallet (optional) Lastly, you will need to download the create a new wallet and retrieve the private key. We will be using the Temple Wallet extension to create a new wallet and to get the private key. If you already have a payout wallet, or know how, skip this section.\nFirst, open Temple Wallet and select the icon in upper right Next, select ’new account’, and input a new (ie Tezpay1) Then, click the icon in the upper right again Then, go to Settings Then, go to Reveal Private Key Then, you will be prompt to input your password for the account Your private key will be displayed here:\nSet Up The next section will review the setup needed for Tezpay. We will review the Configuration File and Payout Wallet files. In this section we will review:\nConfiguration File (simple) Configuration File (advanced) Private-Key File Set Up: Step 1a: Configuration File (simple) This section will review how to setup the configuration file (simple-version) to be used by the TezPay application.\nNote: must have file name config.hjson, case-sensative\nYellow is areas you will input data/edit fields\nBlue are comments about Configuration File objects\nPaste your Baker wallet in between the quotes Set your Baker fee (ie 0.05 = 5% fee) Input minimum payout for delegators (ie. 1 = 1 XTZ) This section allows you to split payments for baking (Bonds) and fees from delegators (Fees) if you want - input Baker wallet address and percentage to split. This example does not split, where 1=100% to baker wallet. This section refers to network parameters to fetch information about the baker in order to compile rewards and payouts - Do not edit unless you are an experienced user Over delegation projection prohibits you from over paying beyond your delegation limit - Do not edit unless you are an experience user This is as basic configuration file for running the TezPay application. The next section will review the advanced configuration file, giving more options and customization to the TezPay application. A user may splice sections from the advanced file to the simple to build a custom file as well - but should be done by experienced users.\nSet Up: Step 1b: Configuration File (advanced) This section will review how to setup the configuration file (advanced-version) to be used by the TezPay application.\nNote: must have file name config.hjson, case-sensative\nYellow is areas you will input data/edit fields Blue are comments about Configuration File objects\nPaste your Baker wallet in between the quotes Set your Baker fee (ie 5% = 0.05) Input minimum payout for delegators (ie. 1 = 1 XTZ) Input minimum staking balance for delegators Input delegators wallets that you wish to ignore completely (not often used) Overrides: These will override global settings for delegators - you may delete/remove specific fields where you want to ignore Input wallet address for specific delegator you wish to apply overrides for Input a delegator-specific custom fee (ie 0.5% = 0.005) Input either true or false where true removes the fee from delegator, and false applies the fee specified in the line above Input minimum balance override for specified wallet\\ If you wish to add multiple wallets for over rides, add another wallet following same format keeping the { } to contain the wallet attribute as shown. This section allows you to split payments for baking (Bonds), input wallet address and percentage to allocate (see example above for structure of more than 1 wallet. 100%=1.00 This section allows you to split payments for fees collected (Fees), input wallet address and percentage to allocate (see example above for structure of more than 1 wallet. 100%=1.00 Donations refer to donating a specific amount of XTZ to wallets every payout Input a donation amount in donate field as a percentage (ie 2.5% = 0.025) Input wallets that you wish to donate to and percentage for each (ie 100% = 1.0) This section refers to network parameters to fetch information about the baker in order to compile rewards and payouts Do not edit unless you are an experienced user Over delegation projection prohibits you from over paying beyond your delegation limit Do not edit unless you are an experience user This section allows for automatic notifications/messages to be sent to specific platforms in order to broadcast messages (ie ‘Bakery has paid 100XTZ in rewards for latest cycle’ We will cover this in a separate section see appendix X and platforms supported are Twitter, Discord, and E-mail Set Up: Step 2: Private-Key File The Private Key file is used to sign the transaction(s) that will payout the rewards. From a security perspective, it is recommended NOT to use the Baker private key due to security concerns with the private key being displayed in plain-text in a file. This section will use the new account and private-key that was acquired in Step 3 - Payout Wallet.\nRetrieve the private-key of the wallet you wish to use from the payout wallet of your choice Paste into a text file (or replace the example that was downloaded from the GitHub repository Save the file with exact file name and extension payout_wallet_private.key - note: the .key is required in this instance (see below) Set Up: Summary At this point there should be 3 files in the directory tezpay. These three files will be used to run the application and payouts. The next section will show the commands to run the TezPay software.\nUsing TezPay Summary of Using Tezpay Using the TezPay application is through CLI for now and will be carried out through a few commands.\nThis section will review:\nGenerating a payout table for all delegates Generating a test notification (Testing the Twitter/Discord/E-mail notifications from the advanced configuration file) Generating an actual payout Running a continual payout Keeping TezPay up-to-date Before using a command in TezPay, you will need to run two additional commands that will allow you to call the application via commands and set permissions While in the TezPay directory in the terminal, run the following commands (see code and examples below):\nmv tezpay-linux-amd64 tezpay\nchmod +x tezpay\nUsing TezPay: Step 1 - Generating a payout Table Generating a payout table is a took that is useful for Public Bakers because it allows the baker to see the incoming rewards from baking (both block rewards \u0026 fees from delegates), review payout per delegator from their stake, and other data (see below).\nThe command to generate a payout table is as follows (always remember to be in the tezpay directory:\n./tezpay generate-payouts\nThis will generate a payout table, as exampled below:\nNote: the Delegator \u0026 Recipient columns have been hidden\nRepresents the table of invalid delegators that will not be paid out due to not meeting specific thresholds (ie minimum payout threshold/minimum balance) Represents the table of valid delegators that will be paid out The list of Delegators first 4 and last 4 characters of their wallet The list of Recipients of payment first 4 and last 4 characters of their wallet (often the same as Delegator) The delegated balance for each Delegator for that particular cycle Represents the kind of reward given (ie delegator reward, baker reward, and fee income) The amount of the specific reward to be paid out The fee rate for each delegator, will reflect those delegators who have custom fees per the configuration file The fee collected by the baker from each delegator for hosting their delegation The transaction fee to pay out each reward Using TezPay: Step 2 - Testing Notifications This step will be used to test the notification system for your TezPay application. This step will NOT need to be completed every payout, but only when you changes messages to test that it was successful.\nwhile in the tezpay directory, use the command:\n./tezpay test-notify\nUsing TezPay: Step 3 - Initiating a Payout To use the TezPay application to send a payment will require 1 line of code and one additional confirmation while it runs.\nTo run TezPay, run the code:\n./tezpay pay\nThe system will initiate the TezPay application at this point and present a payout table, similar to the table(s) from step 1.\nOnce the table is displayed, the prompt will ask you to confirm the payout, and you need to confirm y or n (see below):\nYou will be asked to confirm, type ‘y’ for yes or ‘n’ for no If you confirm the transaction, the payouts will proceed and your delegates will be paid out, as well as your Baker wallet. Remember, if you are using a separate wallet to payout from your Baker wallet you will need to add funds to cover the payments.\nAt this point you have successfully ran the TezPay application and paid out your delegates. Be sure to check the confirmations and any errors that may have been broadcasted in the terminal (ie, the example above did not send notifications because that was not set up).\nUsing TezPay: Step 4 - Running a Continual Payout To use the TezPay application to send a payment will require 1 line of code and one additional confirmation while it runs.\nTo run TezPay in continual mode, run the command:\n./tezpay continual\nRunning in continual mode will start its first payment a little bit after the current cycle (one during which you launched it) finishes and the next one begins (usually around 30-60 minutes after the beginning of the new cycle).\nIf you would like to start in continual mode but still need to pay your delegators for last cycle, run the command from Step 3. first and then launch TezPay in continual mode.\nUsing TezPay: Step 5 - Keeping TezPay Up-to-Date For access to future releases via Linux CLI, run the following command from within the folder where tezpay is located:\nwget -q https://raw.githubusercontent.com/alis-is/tezpay/main/install.sh -O /tmp/install.sh \u0026\u0026 sh /tmp/install.sh\nSummary: TezPay TezPay is an application that allows for easy payouts for public bakers on the Tezos Blockchain. This allows for significant customizations and flexibility with respect to the payout system and empowers bakers to further take control of their Bakery and aid in decentralizing the Tezos Blockchain.\nAny questions/comments/concerns please contact the YourBakeBuddy team on Discord, Twitter, or Telegram\nAppendix Notification setup in Configuration File Summary Notifications can be automatically sent out when payouts are generated using TezPay. The text are configured in the config.json file, however there are preliminary steps needed inorder to be able to utilize these features. This section will review the necessary steps and information needed from platforms that allow for auto-notifications sent via TezPay. **This tutorial is meant for individuals that have zero experience with interacting with these systems - feel free to skip sections if you are an advanced user.**\rTwitter A Baker can use TezPay to automatically send notifications that payments have been made. This allows for ease of communications for the public baker to the delegates and we will walk through steps to allow for this here. There will be two sections:\r1. Twitter Setup\r2. TezPay config.json file setup\rTwitter Setup In order to setup twitter, be sure you are signed in on a browser window to your twitter account. While being signed into Twitter in a seperate browser, navigate to https://developer.twitter.com/ and select ‘Developer Portal’ in the top menu- the developer portal site where you will set up your development account and get the required information for the config.json file and set up permissions. You will then need to fill in some basic information in order to enable the Development Portal profile to be active. be sure that all of the information is correct (if you use multiple twitter accounts be sure the one you want to enable for notifications is the correct one). Once you submit the information for your development profile - you will need to accept the Terms and Conditions. After accepting Terms and Conditions - you will need to verify your e-mail address that you provided by clicking the link in the e-mail sent from Twitter. Once you verify your email - this will automatically link you back to your Developer Portal Site and prompt you for an ‘App Name’ (see TezPay Notif in screen capture). Once you name your App - you will be given 3 seperate Keys. These will be used to inorder to call the Twitter profile that you are looking to send Notifcations to - and sign for the permissions. Be sure to have these saved in a secure place - they will be used later. Once you have the keys secured, click ‘Dashboard’ button in lower right. You will now be in your Twitter Development Dashboard and see the App you created (for this example TezPayNotifs). Click the ‘gear’ icon to continue set-up. Navigate to ‘User Authentication Settings’ section and click ‘Set-up’ to continue. We will fill out the required items for the form under User Authentication settings as follows: i. App Permissions: Select ‘Read and write’ ii. Type of App: Select ‘Web App, Automated App or Bot’\niii. App Info: a. Callback URI/Redirect URL: this can be anything but for this example we will use ‘https://www.TezPayisthebest.com/'\nb. Website URL: this can be anything but for this example we will use ‘https://www.TezPayisthebest.com/'\niv. Click ‘save’ when finished. You will then get your Client ID and Client Secret - copy and save both of these with your other Keys attained earlier. Click ‘Done’\nThis will bring you back to the main screen of the App - navigate to the ‘Keys and Tokens’ toggle at the top of the page. Now, ‘Generate’ an Access Token and secret - write these down and then once you have confirmed you will be ready to edit the config.json in TezPay. Note - be sure the Access Token and Secret has ‘read and write’ permission (see image below). For the Next step - setting up the config.json - you will need four items:\na. API Key and Secret (also known as Consumer Key/Secret)\nb. Access Token and Secret TezPay config.json Setup for Twitter Notifications We will use the API Key and Secret as well as the Access Token and Secret to edit the Config file to allow for permissions and calls to push notifcations upon each successful payout.\nYou will add the following code block at the base of the config.json file to enable the notifications for TezPay. Note that the message_template can be anything and you can use the , , terms to automatically fill in these terms for each cycle. notifications: [\n{\naccess_token: Your_Acces_Token\naccess_token_secret: Your_Access_Token_Secret\nconsumer_key: Your_Consumer_Key\nconsumer_secret: Your_Consumer_Key_Secret\nmessage_template: Rewards for \u003cCycle\u003e have been paid to \u003cDelegators\u003e delegates in amount of \u003cDistributedRewards\u003e using #TezPay.👀 XTZ baked with bakebuddy.xyz! We donate to wallet tz1R2GnBudU97Lra8Q3VDG7cUooNvUQ9ghCs to fund future development in Tezos. #cerberusbakery #tezos.\ntype: twitter\n}\n] Once you have filled in the necessary information - you have setup Notifications for Twitter! Test the notification by using command: a. tezpay test-notify ","categories":"","description":"","excerpt":"TezPay A payment distribution tool that’s easy to setup and automate\nThe goal of this document is to instruct a baker on how to set up TezPay and how to pay-out the bakers delegates. The workflow will …","ref":"/tezpay/tutorial/","tags":"","title":"Tutorial"},{"body":"","categories":"","description":"","excerpt":"","ref":"/tezpay/configuration/","tags":"","title":"Configuration"},{"body":"{ tezpay_config_version: 0 baker: \"\" payouts: { wallet_mode: local-private-key payout_mode: actual fee: 0.05 } delegators: { requirements: {} } income_recipients: {} network: { rpc_url: https://rpc-mainnet.groktech.xyz/ tzkt_url: https://api.tzkt.io/ explorer: https://tzkt.io/ } overdelegation: { protect: true } } ","categories":"","description":"","excerpt":"{ tezpay_config_version: 0 baker: \"\" payouts: { wallet_mode: local-private-key payout_mode: actual fee: 0.05 } delegators: { requirements: {} } income_recipients: {} network: { rpc_url: …","ref":"/tezpay/configuration/examples/default/","tags":"","title":"default"},{"body":"","categories":"","description":"","excerpt":"","ref":"/tezpay/reference/","tags":"","title":"Reference"},{"body":"{ tezpay_config_version: 0 baker: \"\" payouts: { wallet_mode: local-private-key payout_mode: ideal fee: 0.075 baker_pays_transaction_fee: true baker_pays_allocation_fee: true minimum_payout_amount: 10.5 } delegators: { requirements: { minimum_balance: 0.5 } ignore: [ tz1Ke2h7sDdakHJQh8WX4Z372du1KChsksyU tz1burnburnburnburnburnburnburjAYjjX ] overrides: { tz1P6WKJu2rcbxKiKRZHKQKmKrpC9TfW1AwM: { recipient: \"\" fee: 0.005 no_fee: true minimum_balance: 2.5 } } fee_overrides: { .5: [ \"\" ] 1: [ tz1Ke2h7sDdakHJQh8WX4Z372du1KChsksyU tz1burnburnburnburnburnburnburjAYjjX ] } } income_recipients: { bonds: { tz1P6WKJu2rcbxKiKRZHKQKmKrpC9TfW1AwM: 0.455 tz1X7U9XxVz6NDxL4DSZhijME61PW45bYUJE: 0.545 } fees: { tz1P6WKJu2rcbxKiKRZHKQKmKrpC9TfW1AwM: 0.455 tz1X7U9XxVz6NDxL4DSZhijME61PW45bYUJE: 0.545 } donate: 0.025 donations: { tz1P6WKJu2rcbxKiKRZHKQKmKrpC9TfW1AwM: 0.1 tz1UGkfyrT9yBt6U5PV7Qeui3pt3a8jffoWv: 0.9 } } network: { rpc_url: https://rpc-mainnet.groktech.xyz/ tzkt_url: https://api.tzkt.io/ explorer: https://tzstats.com/ ignore_kt: true } overdelegation: { protect: true } notifications: [ { message_template: my awesome message type: discord webhook_url: https://my-discord-webhook.com/ } { admin: true message_template: my awesome message type: discord webhook_url: https://my-admin-discord-webhook.com/ } { message_template: my awesome message type: discord webhook_id: webhook id webhook_token: webhook token } { access_token: your access token access_token_secret: your access token secret consumer_key: your consumer key consumer_secret: your consumer secret message_template: my awesome message type: twitter } { api_token: your api token message_template: my awesome message receivers: [ list of chat numbers without quotes -1234567890 ] type: telegram } { message_template: my awesome message recipients: [ my-follower1@email.is my-follower2@email.is ] sender: my@email.is smtp_identity: \"\" smtp_password: password123 smtp_server: smtp.gmail.com:443 smtp_username: my@email.is type: email } { args: [ --kind \u003ckind\u003e \u003cdata\u003e ] path: path to external notificator binary type: external } ] } ","categories":"","description":"","excerpt":"{ tezpay_config_version: 0 baker: \"\" payouts: { wallet_mode: local-private-key payout_mode: ideal fee: 0.075 baker_pays_transaction_fee: true baker_pays_allocation_fee: true minimum_payout_amount: …","ref":"/tezpay/configuration/examples/sample/","tags":"","title":"sample"},{"body":"tezpay TEZPAY\nSynopsis TEZPAY 0.0.54-alpha - the tezos reward distributor Copyright © 2023 alis.is\nOptions --disable-donation-prompt Disable donation prompt -h, --help help for tezpay -l, --log-level string Sets log level format (trace/debug/info/warn/error) (default \"info\") -o, --output-format string Sets output log format (json/text/auto) (default \"auto\") -p, --path string path to working directory (default \".\") --signer string Override signer --skip-version-check Skip version check SEE ALSO tezpay continual\t- continual payout tezpay generate-payouts\t- generate payouts tezpay pay\t- manual payout tezpay statistics\t- prints earning stats tezpay test-notify\t- notification test tezpay transfer\t- transfers tez to specified address tezpay version\t- prints tezpay version Auto generated by spf13/cobra on 16-Feb-2023 ","categories":"","description":"","excerpt":"tezpay TEZPAY\nSynopsis TEZPAY 0.0.54-alpha - the tezos reward distributor Copyright © 2023 alis.is\nOptions --disable-donation-prompt Disable donation prompt -h, --help help for tezpay -l, --log-level …","ref":"/tezpay/reference/cmd/tezpay/","tags":"","title":"tezpay"},{"body":"tezpay continual continual payout\nSynopsis runs payout until stopped manually\ntezpay continual [flags] Options -c, --cycle int initial cycle --force-confirmation-prompt forces confirmation prompts for each payout -h, --help help for continual --no-separate-sc disables smart contract separation (mixes txs and smart contract calls within batches) Options inherited from parent commands --disable-donation-prompt Disable donation prompt -l, --log-level string Sets log level format (trace/debug/info/warn/error) (default \"info\") -o, --output-format string Sets output log format (json/text/auto) (default \"auto\") -p, --path string path to working directory (default \".\") --signer string Override signer --skip-version-check Skip version check SEE ALSO tezpay\t- TEZPAY Auto generated by spf13/cobra on 16-Feb-2023 ","categories":"","description":"","excerpt":"tezpay continual continual payout\nSynopsis runs payout until stopped manually\ntezpay continual [flags] Options -c, --cycle int initial cycle --force-confirmation-prompt forces confirmation prompts for …","ref":"/tezpay/reference/cmd/tezpay_continual/","tags":"","title":"tezpay_continual"},{"body":"tezpay generate-payouts generate payouts\nSynopsis generates payouts without further processing\ntezpay generate-payouts [flags] Options -c, --cycle int cycle to generate payouts for -h, --help help for generate-payouts --skip-balance-check skips payout wallet balance check --to-file string saves generated payouts to specified file Options inherited from parent commands --disable-donation-prompt Disable donation prompt -l, --log-level string Sets log level format (trace/debug/info/warn/error) (default \"info\") -o, --output-format string Sets output log format (json/text/auto) (default \"auto\") -p, --path string path to working directory (default \".\") --signer string Override signer --skip-version-check Skip version check SEE ALSO tezpay\t- TEZPAY Auto generated by spf13/cobra on 16-Feb-2023 ","categories":"","description":"","excerpt":"tezpay generate-payouts generate payouts\nSynopsis generates payouts without further processing\ntezpay generate-payouts [flags] Options -c, --cycle int cycle to generate payouts for -h, --help help for …","ref":"/tezpay/reference/cmd/tezpay_generate-payouts/","tags":"","title":"tezpay_generate-payouts"},{"body":"tezpay pay manual payout\nSynopsis runs manual payout\ntezpay pay [flags] Options --confirm automatically confirms generated payouts -c, --cycle int cycle to generate payouts for --from-file string loads payouts from file instead of generating on the fly -h, --help help for pay --no-separate-sc disables smart contract separation (mixes txs and smart contract calls within batches) --notificator string Notify through specific notificator --report-to-stdout prints them to stdout (wont write to file) -s, --silent suppresses notifications --skip-balance-check skips payout wallet balance check Options inherited from parent commands --disable-donation-prompt Disable donation prompt -l, --log-level string Sets log level format (trace/debug/info/warn/error) (default \"info\") -o, --output-format string Sets output log format (json/text/auto) (default \"auto\") -p, --path string path to working directory (default \".\") --signer string Override signer --skip-version-check Skip version check SEE ALSO tezpay\t- TEZPAY Auto generated by spf13/cobra on 16-Feb-2023 ","categories":"","description":"","excerpt":"tezpay pay manual payout\nSynopsis runs manual payout\ntezpay pay [flags] Options --confirm automatically confirms generated payouts -c, --cycle int cycle to generate payouts for --from-file string …","ref":"/tezpay/reference/cmd/tezpay_pay/","tags":"","title":"tezpay_pay"},{"body":"tezpay statistics prints earning stats\nSynopsis prints out earning statiscs\ntezpay statistics [flags] Options --cycles int number of cycles to collect statistics from (default 10) -h, --help help for statistics --last-cycle int last cycle to collect statistics from (has priority over --cycles) Options inherited from parent commands --disable-donation-prompt Disable donation prompt -l, --log-level string Sets log level format (trace/debug/info/warn/error) (default \"info\") -o, --output-format string Sets output log format (json/text/auto) (default \"auto\") -p, --path string path to working directory (default \".\") --signer string Override signer --skip-version-check Skip version check SEE ALSO tezpay\t- TEZPAY Auto generated by spf13/cobra on 16-Feb-2023 ","categories":"","description":"","excerpt":"tezpay statistics prints earning stats\nSynopsis prints out earning statiscs\ntezpay statistics [flags] Options --cycles int number of cycles to collect statistics from (default 10) -h, --help help for …","ref":"/tezpay/reference/cmd/tezpay_statistics/","tags":"","title":"tezpay_statistics"},{"body":"tezpay test-notify notification test\nSynopsis sends test notification\ntezpay test-notify [flags] Options -h, --help help for test-notify --notificator string Notify through specific notificator Options inherited from parent commands --disable-donation-prompt Disable donation prompt -l, --log-level string Sets log level format (trace/debug/info/warn/error) (default \"info\") -o, --output-format string Sets output log format (json/text/auto) (default \"auto\") -p, --path string path to working directory (default \".\") --signer string Override signer --skip-version-check Skip version check SEE ALSO tezpay\t- TEZPAY Auto generated by spf13/cobra on 16-Feb-2023 ","categories":"","description":"","excerpt":"tezpay test-notify notification test\nSynopsis sends test notification\ntezpay test-notify [flags] Options -h, --help help for test-notify --notificator string Notify through specific notificator …","ref":"/tezpay/reference/cmd/tezpay_test-notify/","tags":"","title":"tezpay_test-notify"},{"body":"tezpay transfer transfers tez to specified address\nSynopsis transfers tez to specified address from payout wallet\ntezpay transfer \u003cdestination\u003e \u003camount tez\u003e [flags] Options --confirm automatically confirms transfer -h, --help help for transfer --mutez amount in mutez Options inherited from parent commands --disable-donation-prompt Disable donation prompt -l, --log-level string Sets log level format (trace/debug/info/warn/error) (default \"info\") -o, --output-format string Sets output log format (json/text/auto) (default \"auto\") -p, --path string path to working directory (default \".\") --signer string Override signer --skip-version-check Skip version check SEE ALSO tezpay\t- TEZPAY Auto generated by spf13/cobra on 16-Feb-2023 ","categories":"","description":"","excerpt":"tezpay transfer transfers tez to specified address\nSynopsis transfers tez to specified address from payout wallet\ntezpay transfer \u003cdestination\u003e \u003camount tez\u003e [flags] Options --confirm automatically …","ref":"/tezpay/reference/cmd/tezpay_transfer/","tags":"","title":"tezpay_transfer"},{"body":"tezpay version prints tezpay version\nSynopsis generates payouts without further processing\ntezpay version [flags] Options -h, --help help for version Options inherited from parent commands --disable-donation-prompt Disable donation prompt -l, --log-level string Sets log level format (trace/debug/info/warn/error) (default \"info\") -o, --output-format string Sets output log format (json/text/auto) (default \"auto\") -p, --path string path to working directory (default \".\") --signer string Override signer --skip-version-check Skip version check SEE ALSO tezpay\t- TEZPAY Auto generated by spf13/cobra on 16-Feb-2023 ","categories":"","description":"","excerpt":"tezpay version prints tezpay version\nSynopsis generates payouts without further processing\ntezpay version [flags] Options -h, --help help for version Options inherited from parent commands …","ref":"/tezpay/reference/cmd/tezpay_version/","tags":"","title":"tezpay_version"},{"body":"","categories":"","description":"","excerpt":"","ref":"/categories/","tags":"","title":"Categories"},{"body":"","categories":"","description":"","excerpt":"","ref":"/tags/","tags":"","title":"Tags"}]